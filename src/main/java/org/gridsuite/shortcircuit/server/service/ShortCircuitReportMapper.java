/**
 * Copyright (c) 2023, RTE (http://www.rte-france.com)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package org.gridsuite.shortcircuit.server.service;

import com.powsybl.commons.reporter.Report;
import com.powsybl.commons.reporter.Reporter;
import com.powsybl.commons.reporter.ReporterModel;
import com.powsybl.commons.reporter.TypedValue;
import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * This class manages how to postprocess reports of the proprietary courcir simulator to reduce the number of reports
 * by aggregating them.
 * <br/>
 * The tree structure returned by the courcirc proprietary simulator is:
 * <pre>
 * 00000000-0000-0000-0000-000000000000@ShortCircuitAnalysis
 * \-- ShortCircuitAnalysis -> "ShortCircuitAnalysis (${providerToUse})"
 *     +-- generatorConversion -> "Conversion of generators"
 *     +-- batteryConversion -> "Conversion of the batteries"
 *     +-- branchConversion -> "Conversion of branches"
 *     |   +-- lineConversion -> "Conversion of lines"
 *     |   +-- tieLineConversion -> "Conversion of tie lines"
 *     |   +-- twoWindingsTransformerConversion -> "Conversion of two windings transformers"
 *     |   \-- threeWindingsTransformerConversion -> "Conversion of three windings transformers"
 *     +-- danglinglinesConversion -> "Conversion of the dangling lines"
 *     \--courcirc -> "Logs generated by Courcirc simulator"
 * </pre>
 *
 * @implNote as the tree to aggregate seems relatively simple, a simple utility class will suffice
 *
 * @see com.powsybl.commons.reporter.Reporter
 * @see com.powsybl.commons.reporter.ReporterModel
 * @see com.powsybl.commons.reporter.Report
 */
@Slf4j
@Component
public class ShortCircuitReportMapper {
    /**
     * Will try to modify the reporter
     * @param reporter the reporter to modify
     * @return the result
     *
     * @implNote currently support only some implementations of {@link Reporter}
     */
    public Reporter modifyReporter(@NonNull final Reporter reporter) {
        if (reporter instanceof ReporterModel reporterModel && reporterModel.getTaskKey().matches("^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}@)?ShortCircuitAnalysis$")) {
            log.debug("ShortCircuitAnalysis root node found, will modify it!");
            return forUuidAtShortCircuitAnalysis(reporterModel);
        } else {
            log.trace("Unrecognized Reporter of type {}", reporter.getClass().getSimpleName());
            return reporter;
        }
    }

    /**
     * Modify node with key {@code ********-****-****-****-************@ShortCircuitAnalysis} or {@code ShortCircuitAnalysis}
     *
     * @implNote we assume there will always be at least one modification
     */
    private Reporter forUuidAtShortCircuitAnalysis(@NonNull final ReporterModel reporterModel) {
        final ReporterModel newReporter = new ReporterModel(reporterModel.getTaskKey(), reporterModel.getDefaultName(), reporterModel.getTaskValues());
        reporterModel.getReports().forEach(newReporter::report);
        reporterModel.getSubReporters().forEach(reporter -> {
            if ("ShortCircuitAnalysis".equals(reporter.getTaskKey())
                && "Courcirc".equals(reporter.getTaskValues().getOrDefault("providerToUse", new TypedValue("", "")).getValue())) {
                newReporter.addSubReporter(forShortCircuitAnalysis(reporter));
            } else {
                newReporter.addSubReporter(reporter);
            }
        });
        return newReporter;
    }

    /**
     * Modify node with key {@code ShortCircuitAnalysis}
     *
     * @implNote we assume there will always be at least one modification
     */
    private ReporterModel forShortCircuitAnalysis(@NonNull final ReporterModel reporterModel) {
        final ReporterModel newReporter = new ReporterModel(reporterModel.getTaskKey(), reporterModel.getDefaultName(), reporterModel.getTaskValues());
        reporterModel.getReports().forEach(newReporter::report);
        reporterModel.getSubReporters().forEach(reporter -> newReporter.addSubReporter(
            switch (reporter.getTaskKey()) {
                case "courcirc" -> forCourcirc(reporter);
                default -> reporter;
            }));
        return newReporter;
    }

    /**
     * Modify node with key {@code courcirc}
     * <br/>
     * The relevant part of the tree structure created by the courcirc proprietary simulator output is:
     * <pre>
     * 00000000-0000-0000-0000-000000000000@ShortCircuitAnalysis
     * \-- ShortCircuitAnalysis -> "ShortCircuitAnalysis (${providerToUse})"
     *     \-- courcirc -> "Logs generated by Courcirc simulator"
     * </pre>
     * this courcirc reporter, among other useful reports, contains hundreds of reports that are counted and replaced
     * by a single aggregate report
     *
     * @apiNote the main goal here is to concat specific log lines with a huge number of repetitions
     * @implNote courcirc logs don't seem to use enumerate keys neither template value, only incremental keys (REC_0,REC_1,...),
     *           so we need to test the message
     */
    private ReporterModel forCourcirc(@NonNull final ReporterModel reporterModel) {
        log.trace("courcirc logs detected, will analyse them...");
        final ReporterModel newReporter = new ReporterModel(reporterModel.getTaskKey(), reporterModel.getDefaultName(), reporterModel.getTaskValues());
        reporterModel.getSubReporters().forEach(newReporter::addSubReporter);
        /* preparing */
        final Pattern patternTransientReactanceTooLow = Pattern.compile("^(.+) +: transient reactance too low ==> generator ignored$", Pattern.CASE_INSENSITIVE);
        final List<String> logsTransientReactanceTooLow = new ArrayList<>(newReporter.getReports().size());
        /* analyze and compute logs in one pass */
        for (final Report report : reporterModel.getReports()) { //we modify logs conditionally here
            final Matcher matcherTransientReactanceTooLow = patternTransientReactanceTooLow.matcher(report.getDefaultMessage());
            if (matcherTransientReactanceTooLow.matches()) { //we match line "X.ABCDEF1 : transient reactance too low ==> generator ignored"
                logsTransientReactanceTooLow.add(matcherTransientReactanceTooLow.group(1));
            } else { //we keep this log as is
                newReporter.report(report);
            }
        }
        /* finalize computation */
        log.debug("Found {} lines in courcirc logs matching \"MYNODE : transient reactance too low ==> generator ignored\"", logsTransientReactanceTooLow.size());
        if (!logsTransientReactanceTooLow.isEmpty()) {
            newReporter.report("TransientReactanceTooLow", "${nb} node(s) with transient reactance too low ==> generator ignored\n${nodes}",
                                Map.of("reportSeverity", TypedValue.WARN_SEVERITY,
                                       "nb", new TypedValue(logsTransientReactanceTooLow.size(), TypedValue.UNTYPED),
                                       "nodes", new TypedValue(String.join(", ", logsTransientReactanceTooLow), TypedValue.UNTYPED)));
        }
        return newReporter;
    }
}
