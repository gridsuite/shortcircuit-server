/**
 * Copyright (c) 2023, RTE (http://www.rte-france.com)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package org.gridsuite.shortcircuit.server.reports;

import com.powsybl.commons.reporter.Report;
import com.powsybl.commons.reporter.Reporter;
import com.powsybl.commons.reporter.ReporterModel;
import com.powsybl.commons.reporter.TypedValue;
import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Component;

import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.regex.Pattern;

/**
 * This class manages how to postprocess reports of the proprietary courcir simulator to reduce the number of reports
 * by aggregating them.
 * <br/>
 * The tree structure returned by the courcirc proprietary simulator is:
 * <pre>
 * 00000000-0000-0000-0000-000000000000@ShortCircuitAnalysis  or  ShortCircuitAnalysis
 * \-- ShortCircuitAnalysis -> "ShortCircuitAnalysis (${providerToUse})"
 *     +-- [...]
 *     \--courcirc -> "Logs generated by Courcirc simulator"
 * </pre>
 *
 * @implNote as the tree to aggregate seems relatively simple, a simple utility class will suffice
 *
 * @see com.powsybl.commons.reporter.Reporter
 * @see com.powsybl.commons.reporter.ReporterModel
 * @see com.powsybl.commons.reporter.Report
 */
@Slf4j
@Component
public class ReportMapperCourcirc extends AbstractReportMapper {
    private static final String PATTERN_TRANSIENT_REACTANCE_TOO_LOW = " : transient reactance too low ==> generator ignored";
    private static final String PATTERN_SIMULATING_SHORT_CIRCUIT_LOCATED = "Simulating : short-circuit located on node ";

    /**
     * {@inheritDoc}
     */
    @Override
    protected Reporter forUuidAtShortCircuitAnalysis(@NonNull final ReporterModel reporterModel) {
        final ReporterModel newReporter = new ReporterModel(reporterModel.getTaskKey(), reporterModel.getDefaultName(), reporterModel.getTaskValues());
        reporterModel.getReports().forEach(newReporter::report);
        reporterModel.getSubReporters().forEach(reporter -> {
            if ("ShortCircuitAnalysis".equals(reporter.getTaskKey())
                && "Courcirc".equals(reporter.getTaskValues().getOrDefault("providerToUse", new TypedValue("", "")).getValue())) {
                newReporter.addSubReporter(forShortCircuitAnalysis(reporter));
            } else {
                newReporter.addSubReporter(reporter);
            }
        });
        return newReporter;
    }

    /**
     * Modify node with key {@code ShortCircuitAnalysis}
     *
     * @implNote we assume there will always be at least one modification
     */
    @Override
    protected ReporterModel forShortCircuitAnalysis(@NonNull final ReporterModel reporterModel) {
        final ReporterModel newReporter = new ReporterModel(reporterModel.getTaskKey(), reporterModel.getDefaultName(), reporterModel.getTaskValues());
        reporterModel.getReports().forEach(newReporter::report);
        reporterModel.getSubReporters().forEach(reporter -> newReporter.addSubReporter(
            switch (reporter.getTaskKey()) {
                case "courcirc" -> forCourcirc(reporter);
                default -> reporter;
            }));
        return newReporter;
    }

    /**
     * Modify node with key {@code courcirc}
     * <br/>
     * The relevant part of the tree structure created by the courcirc proprietary simulator output is:
     * <pre>
     * 00000000-0000-0000-0000-000000000000@ShortCircuitAnalysis
     * \-- ShortCircuitAnalysis -> "ShortCircuitAnalysis (${providerToUse})"
     *     \-- courcirc -> "Logs generated by Courcirc simulator"
     * </pre>
     * this courcirc reporter, among other useful reports, contains hundreds of reports.
     *
     * @apiNote the main goal here is to concat specific log lines with a huge number of repetitions into one summary line
     *          and change existing lines found to {@code TRACE} severity
     * @implNote courcirc logs don't seem to use enumerate keys neither template value, only incremental keys (REC_0,REC_1,...),
     *           so we need to test the message
     */
    private ReporterModel forCourcirc(@NonNull final ReporterModel reporterModel) {
        log.trace("courcirc logs detected, will analyse them...");
        final ReporterModel newReporter = new ReporterModel(reporterModel.getTaskKey(), reporterModel.getDefaultName(), reporterModel.getTaskValues());
        reporterModel.getSubReporters().forEach(newReporter::addSubReporter);

        /* preparing */
        long logsTransientReactanceTooLowCount = 0L;
        var warppedLogsTransientReactanceTooLowSummary = new Object() { ReportWrapper value = null; };
        var warppedLogsTransientReactanceTooLowSeverity = new Object() { TypedValue value = null; };

        long logsSimulatingShortCircuitLocatedCount = 0L;
        var warppedLogsSimulatingShortCircuitLocatedSummary = new Object() { ReportWrapper value = null; };
        var warppedLogsSimulatingShortCircuitLocatedSeverity = new Object() { TypedValue value = null; };

        final Pattern logsShortCircuitNotSimulatedPattern = Pattern.compile("^Short circuit on node .+ is not simulated : it is located in an out of voltage part of the network$", Pattern.CASE_INSENSITIVE);
        long logsShortCircuitNotSimulatedCount = 0L;
        var warppedLogsShortCircuitNotSimulatedSummary = new Object() { ReportWrapper value = null; };
        var wrappedLogsShortCircuitNotSimulatedSeverity = new Object() { TypedValue value = null; };

        /* analyze and compute logs in one pass */
        for (final Report report : reporterModel.getReports()) { //we modify logs conditionally here
            if (StringUtils.endsWith(report.getDefaultMessage(), PATTERN_TRANSIENT_REACTANCE_TOO_LOW)) {
                //we match line "X.ABCDEF1 : transient reactance too low ==> generator ignored"
                computeReportCommonPart(newReporter, report,
                        () -> warppedLogsTransientReactanceTooLowSummary.value,
                        r -> warppedLogsTransientReactanceTooLowSummary.value = r,
                        s -> warppedLogsTransientReactanceTooLowSeverity.value = s);
                logsTransientReactanceTooLowCount++;
            } else if (StringUtils.startsWith(report.getDefaultMessage(), PATTERN_SIMULATING_SHORT_CIRCUIT_LOCATED)) {
                //we match line "Simulating : short-circuit located on node .BRIDGE_0"
                computeReportCommonPart(newReporter, report,
                        () -> warppedLogsSimulatingShortCircuitLocatedSummary.value,
                        r -> warppedLogsSimulatingShortCircuitLocatedSummary.value = r,
                        s -> warppedLogsSimulatingShortCircuitLocatedSeverity.value = s);
                logsSimulatingShortCircuitLocatedCount++;
            } else if (logsShortCircuitNotSimulatedPattern.matcher(report.getDefaultMessage()).matches()) {
                //we match line "Short circuit on node ABCDEP4_0 is not simulated : it is located in an out of voltage part of the network"
                computeReportCommonPart(newReporter, report,
                        () -> warppedLogsShortCircuitNotSimulatedSummary.value,
                        r -> warppedLogsShortCircuitNotSimulatedSummary.value = r,
                        s -> wrappedLogsShortCircuitNotSimulatedSeverity.value = s);
                logsShortCircuitNotSimulatedCount++;
                //TODO Reactive range is too small for generator xxx, voltage regulation will be turned off. --> Remplacer par: Reactive range is too small for N generators, voltage regulation will be tunred off.   (N - nombre groupes concernÃ©s)
                //TODO Odd Pmax value (xxx) for generator xxx, will probably be responsible of bad balance --> Remplacer par: Odd Pmax value for N generators, will probably be responsible of bad balance.
                //TODO Active power setpoint (xxx) outside reactive limits for generator xxx --> Remplacer par: Active power setpoints outside reactive limits for N generators.
            } else { //we keep this log as is
                newReporter.report(report);
            }
        }

        /* finalize computation of summaries */
        log.debug("Found {} lines in courcirc logs matching \"MYNODE : transient reactance too low ==> generator ignored\"", logsTransientReactanceTooLowCount);
        if (warppedLogsTransientReactanceTooLowSummary.value != null) {
            warppedLogsTransientReactanceTooLowSummary.value.setReport(new Report("transientReactanceTooLowSummary",
                    "${nb} node(s) with transient reactance too low ==> generator ignored",
                    Map.of(Report.REPORT_SEVERITY_KEY, ObjectUtils.defaultIfNull(warppedLogsTransientReactanceTooLowSeverity.value, TypedValue.WARN_SEVERITY),
                            "nb", new TypedValue(logsTransientReactanceTooLowCount, TypedValue.UNTYPED))));
        }
        log.debug("Found {} lines in courcirc logs matching \"Simulating : short-circuit located on node MYNODE\"", logsSimulatingShortCircuitLocatedCount);
        if (warppedLogsSimulatingShortCircuitLocatedSummary.value != null) {
            warppedLogsSimulatingShortCircuitLocatedSummary.value.setReport(new Report("simulatingShortCircuitLocatedNodeSummary",
                    "Simulating: short-circuits located on ${nb} nodes",
                    Map.of(Report.REPORT_SEVERITY_KEY, ObjectUtils.defaultIfNull(warppedLogsSimulatingShortCircuitLocatedSeverity.value, TypedValue.INFO_SEVERITY),
                            "nb", new TypedValue(logsSimulatingShortCircuitLocatedCount, TypedValue.UNTYPED))));
        }
        log.debug("Found {} lines in courcirc logs matching \"Short circuit on node MYNODE is not simulated : it is located in an out of voltage part of the network\"", logsShortCircuitNotSimulatedCount);
        if (warppedLogsShortCircuitNotSimulatedSummary.value != null) {
            warppedLogsShortCircuitNotSimulatedSummary.value.setReport(new Report("shortCircuitNodeNotSimulatedOutOfVoltageSummary",
                    "Short circuit on ${nb} nodes is not simulated : they are in an out of voltage part of the network.",
                    Map.of(Report.REPORT_SEVERITY_KEY, ObjectUtils.defaultIfNull(wrappedLogsShortCircuitNotSimulatedSeverity.value, TypedValue.WARN_SEVERITY),
                            "nb", new TypedValue(logsShortCircuitNotSimulatedCount, TypedValue.UNTYPED))));
        }

        return newReporter;
    }

    /**
     * Common actions for log lines found in {@link #forCourcirc(ReporterModel)}
     * @param reporter
     * @param report
     * @param getterSummary
     * @param setterSummary
     * @param setterSeverity
     */
    private static void computeReportCommonPart(@NonNull final ReporterModel reporter, @NonNull final Report report,
                                                @NonNull final Supplier<ReportWrapper> getterSummary, @NonNull final Consumer<ReportWrapper> setterSummary,
                                                @NonNull final Consumer<TypedValue> setterSeverity) {
        if (getterSummary.get() == null) {
            setterSummary.accept(new ReportWrapper());
            reporter.report(getterSummary.get());
            setterSeverity.accept(report.getValue(Report.REPORT_SEVERITY_KEY));
        }
        ReportsUtils.copyReportAsTrace(reporter, report);
    }
}
